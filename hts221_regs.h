/**
  * @file hts221_dev.h
  * @author generated by mrt-device utility 
  * @link [https://github.com/uprev-mrt/mrtutils/wiki/mrt-device]
  * @brief values and constants for the HTS221 device registers
  * 
  */

#define HTS221_I2C_ADDRESS 0xBE
#define HTS221_REG_ADDR_SIZE 1


/*******************************************************************************
  Register Addresses                                                                              
*******************************************************************************/

#define HTS_REG_WHO_AM_I_ADDR                                      0x0F /* Id Register */
#define HTS_REG_AV_CONF_ADDR                                       0x10 /* Humidity and temperature resolution mode */
#define HTS_REG_CTRL1_ADDR                                         0x20 /* Control register 1 */
#define HTS_REG_CTRL2_ADDR                                         0x21 /* Control register 2 */
#define HTS_REG_CTRL3_ADDR                                         0x22 /* Control register 3 */
#define HTS_REG_STATUS_ADDR                                        0x27 /* Status register */
#define HTS_REG_HUMIDITY_OUT_ADDR                                  0x28 /* Relative humidity data */
#define HTS_REG_TEMP_OUT_ADDR                                      0x2A /* Temperature data */
#define HTS_REG_H0_RH_X2_ADDR                                      0x30 /* Calibration data */
#define HTS_REG_H1_RH_X2_ADDR                                      0x31 /* Calibration data */
#define HTS_REG_T0_DEGC_X8_ADDR                                    0x32 /* Calibration data */
#define HTS_REG_T1_DEGC_X8_ADDR                                    0x33 /* Calibration data */
#define HTS_REG_T1T0_MSB_ADDR                                      0x35 /* Calibration data */
#define HTS_REG_H0_T0_OUT_ADDR                                     0x36 /* Calibration data */
#define HTS_REG_H1_T0_OUT_ADDR                                     0x3A /* Calibration data */
#define HTS_REG_T0_OUT_ADDR                                        0x3C /* Calibration data */
#define HTS_REG_T1_OUT_ADDR                                        0x3E /* Calibration data */


/*******************************************************************************
  Fields                                                                              
*******************************************************************************/

/* AV_CONF Register Fields */
    /* AV_CONF -> AVGH */
    #define HTS_AV_CONF_AVGH_FIELD_MASK                            0x07 /* Selects the number of Humidity samples to average for data output */
    #define HTS_AV_CONF_AVGH_FIELD_OFFSET                          0x00
    /* AV_CONF -> AVGT */
    #define HTS_AV_CONF_AVGT_FIELD_MASK                            0x38 /* Selects the number of Temperature samples to average for data output */
    #define HTS_AV_CONF_AVGT_FIELD_OFFSET                          0x03

/* CTRL1 Register Fields */
    /* CTRL1 -> Flags */
    #define HTS_CTRL1_PD                                           0x80 /* power down mode */
    #define HTS_CTRL1_BDU                                          0x04 /* Block Data update. Prevents update until LSB of data is read */
    /* CTRL1 -> ODR */
    #define HTS_CTRL1_ODR_FIELD_MASK                               0x03 /* Selects the Output rate for the sensor data */
    #define HTS_CTRL1_ODR_FIELD_OFFSET                             0x00
      #define HTS_CTRL1_ODR_ONESHOT                                0x00 /* readings must be requested */
      #define HTS_CTRL1_ODR_1HZ                                    0x01 /* 1 hz sampling */
      #define HTS_CTRL1_ODR_7HZ                                    0x02 /* 7 hz sampling */
      #define HTS_CTRL1_ODR_12_5HZ                                 0x03 /* 12.5 hz sampling */

/* CTRL2 Register Fields */
    /* CTRL2 -> Flags */
    #define HTS_CTRL2_BOOT                                         0x80 /* Reboot memory content */
    #define HTS_CTRL2_HEATER                                       0x02 /* Enable intenal heating element */
    #define HTS_CTRL2_ONESHOT                                      0x01 /* Start conversion for new data */

/* STATUS Register Fields */
    /* STATUS -> Flags */
    #define HTS_STATUS_TEMP_READY                                  0x01 /* indicates that a temperature reading is ready */
    #define HTS_STATUS_HUM_READY                                   0x02 /* indicates that a humidity reading is ready */


/*******************************************************************************
  Default Values                                                                              
*******************************************************************************/

#define HTS_WHO_AM_I_DEFAULT                                       0xBC
#define HTS_AV_CONF_DEFAULT                                        0x1B
#define HTS_CTRL1_DEFAULT                                          0x00
#define HTS_CTRL2_DEFAULT                                          0x00
#define HTS_CTRL3_DEFAULT                                          0x00
#define HTS_STATUS_DEFAULT                                         0x00

/*******************************************************************************
  Flag Set/Clear/Check                                                                             
*******************************************************************************/

/**
  *@brief sets flags on device
  *@param dev ptr to HTS221 device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  */
#define hts_set_flag(dev, reg, mask) regdev_set_flags(&(dev)->mRegDev,(reg), (mask))

/**
  *@brief clears flags on device
  *@param dev ptr to HTS221 device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  */
#define hts_clear_flag(dev, reg, mask) regdev_clear_flags(&(dev)->mRegDev,(reg), (mask))

/**
  *@brief checks flags on device
  *@param dev ptr to HTS221 device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  *@return true if all flags in mask are set 
  *@return false if any flags in mask are not set
  */
#define hts_check_flag(dev, reg, mask) regdev_check_flags(&(dev)->mRegDev,(reg), (mask))

/*******************************************************************************
  Field Getters                                                                              
*******************************************************************************/

/**
 * @brief reads the AVGH field from the device 
 * @param dev ptr to HTS221 device
 */
#define hts_get_av_conf_avgh(dev) regdev_read_field(dev->mRegDev, &(dev)->mAvConf, HTS_AV_CONF_AVGH_MASK )

/**
 * @brief reads the AVGT field from the device 
 * @param dev ptr to HTS221 device
 */
#define hts_get_av_conf_avgt(dev) regdev_read_field(dev->mRegDev, &(dev)->mAvConf, HTS_AV_CONF_AVGT_MASK )

/**
 * @brief reads the ODR field from the device 
 * @param dev ptr to HTS221 device
 * @return HTS_CTRL1_ODR_ONESHOT readings must be requested
 * @return HTS_CTRL1_ODR_1HZ 1 hz sampling
 * @return HTS_CTRL1_ODR_7HZ 7 hz sampling
 * @return HTS_CTRL1_ODR_12_5HZ 12.5 hz sampling
 */
#define hts_get_ctrl1_odr(dev) regdev_read_field(dev->mRegDev, &(dev)->mCtrl1, HTS_CTRL1_ODR_MASK )



/*******************************************************************************
  Field Setters                                                                              
*******************************************************************************/

/**
 * @brief writes the AVGH field from the device 
 * @param dev ptr to HTS221 device
 */
#define hts_set_av_conf_avgh(dev) regdev_write_field(dev->mRegDev, &(dev)->mAvConf, HTS_AV_CONF_AVGH_MASK )

/**
 * @brief writes the AVGT field from the device 
 * @param dev ptr to HTS221 device
 */
#define hts_set_av_conf_avgt(dev) regdev_write_field(dev->mRegDev, &(dev)->mAvConf, HTS_AV_CONF_AVGT_MASK )

/**
 * @brief writes the ODR field from the device 
 * @param dev ptr to HTS221 device
 * @option HTS_CTRL1_ODR_ONESHOT readings must be requested
 * @option HTS_CTRL1_ODR_1HZ 1 hz sampling
 * @option HTS_CTRL1_ODR_7HZ 7 hz sampling
 * @option HTS_CTRL1_ODR_12_5HZ 12.5 hz sampling
 */
#define hts_set_ctrl1_odr(dev) regdev_write_field(dev->mRegDev, &(dev)->mCtrl1, HTS_CTRL1_ODR_MASK )


/*******************************************************************************
  Configs                                                                            
*******************************************************************************/

/**
 * @brief Sets device to update every second
 * @param dev ptr to HTS221 device
 */
#define hts_load_config_auto_1hz(dev) \
hts_write_reg( (dev), &(dev)->mCtrl1, 0x05);     /* ODR: 1HZ , BDU: 1 */          \
hts_write_reg( (dev), &(dev)->mCtrl2, 0x66);                                      \

